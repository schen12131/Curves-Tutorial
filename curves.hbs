---
title: learn
slug: learn/
---

<div id="learn-page">

  {{> sidebar}}

  <div class="column-span">

    <section role="region" label="main content">

      <div class="attribution">
      This tutorial is written by J David Eisenberg and ported by Sally Chen. If you see any errors or have comments, <a href="https://github.com/processing/p5.js/issues"> please let us know.</a>
      This work is licensed under a <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"> Creative Commons Attribution-NonCommercial-ShareAlinke 4.0 International License.</a>

      </div>

      <h1>Curves</h1>

      <p>
      This short tutorial introduces you to the three types of curves in Processing: arcs, spline curves, and Bézier curves.
      </p>

      <h2> Arcs </h2>

      <p>
      Arcs are the simplest curves to draw. Processing defines an arc as a section of an ellipse. You call the function with these parameters:
      </p>

      <p>
      arc (x, y, w, h, start, stop, [mode])
      </p>

      <p>
        <ul>
          <li>x: x-coordinate of the arc's ellipse</li>
          <li>y: y-coordinate of the arc's ellipse</li>
          <li>w: width of the arc's ellipse by default</li>
          <li>h: height of the arc's ellipse by default</li>
          <li>start: angle to start the arc, specified in radians</li>
          <li>stop: angle to stop the arc, specified in radians</li>
          <li>mode: optional parameter to determine the way of drawing the arc. either CHORD, PIE or OPEN</li>
        </ul>
      </p>

      <p>
      The first four parameters define the boundary box for your arc and the next two are the angles for the arc. These angles are given in radians
      and are measured clockwise with zero degrees pointing east and PI radians equals 180°.
      </p>

      <!-- this script only needs to get added once even if there are multiple widget instances -->
      <script src="//toolness.github.io/p5.js-widget/p5-widget.js"></script>
      <script type="text/p5" data-autoplay>
        function draw() {
          createCanvas(300, 300);
          background(150);
          stroke(0);
          arc(35, 35, 50, 50, 0, PI / 2.0); // lower quarter circle
          arc(105, 35, 50, 50, -PI, 0, CHORD);  // upper half of circle
          arc(175, 35, 50, 50, -PI / 6, PI / 6, PIE); // 60 degrees
          noFill();
          arc(105, 105, 100, 50, PI / 2, 3 * PI / 2, OPEN); // 180 degrees
        }
      </script>

      <h3>Spline Curves</h3>

      <p>
      Arcs are fine, but they’re plain. The next function, curve(), lets you draw curves that aren’t necessarily part of an arc. This function draws what is technically called a Rom-Catmull Spline.
      To draw the curve, you must specify the (x, y) coordinates of the points where the curve starts and ends. You must also specify two control points which determine the direction and amount of curvature.
      A call to curve() uses these parameters:
      </p>

      <p>
      Curve (cpx1, cpy1, x1, y1, x2, y2, cpx2, cpy2);
      </p>

      <p>
        <ul>
          <li>cpx1, cpy1: Coordinates of the first control point</li>
          <li>x1, y1:Coordinates of the curve’s starting point</li>
          <li>x2, y2: Coordinates of the curve’s ending point</li>
          <li>cpx2, cpy2: Coordinates of the second control point</li>
        </ul>
      </p>

      <p>
      How do the control points affect the way the curve looks?
      </p>

      <p>
        <ul>
          <li>The tangent to the curve at the start point is parallel to the line between control point one and the end of the curve.</li>
          <li>The tangent to the curve at the end point is parallel to the line between the start point and control point 2.</li>
        </ul>
      </p>

      <p>
      The following diagram shows a curve and the points can be dragged to show how the control point affects the curve:
      </p>

      <!-- iframe for the curve and dragging points -->
      <iframe src="http://p5js.org/assets/learn/curves/curve_ex.js" width="600px" height="400px">
      </iframe>


      <h4>Continuous Spline Curves</h4>

      <p>
      In isolation, a single curve() is not particularly appealing. To draw a continuous curve through several points, you are better off using the curveVertex() function.
      You can only use this function when you are creating a shape with the beginShape() and endShape() functions.In common usage, people use the first point of the curve
      as the first control point and the last point of the curve as the last control point.
      </p>


      <script type="text/p5"  data-autoplay>
      var coords = [80, 80, 160, 120, 200, 200, 120, 240, 100, 300];

      function setup() {
        createCanvas(400, 400);
      }

      function draw() {
        background(255);
        noFill();
        stroke(0);
        beginShape();
        curveVertex(80,80);
        curveVertex(80,80);
        curveVertex(160,120);
        curveVertex(200,200);
        curveVertex(120,240);
        curveVertex(100,300);
        curveVertex(100,300);
        endShape();

         for (var i = 0; i < coords.length; i+= 2){
          ellipse(coords[i], coords[i+1], 10, 10);
         }
      }
      </script>

      <h5>Bézier Curves<h5>

      <p>
        Though better than arcs, spline curves don’t seem to have those graceful, swooping curves that say “art.” For those, you need to draw Bézier curves with the bezier() function.
        As with spline curves, the bezier() function has eight parameters, but the order is different:
      </p>

      <p> bezier(x1, y1, cpx1, cpy1, cpx2, cpy2, x2, y2); </p>

      <p>
        <ul>
          <li>x1, y1	Coordinates of the curve’s starting point</li>
          <li>cpx1, cpy1	Coordinates of the first control point</li>
          <li>cpx2, cpy2	Coordinates of the second control point</li>
          <li>x2, y2	Coordinates of the curve’s ending point</li>
        </ul>
      </p>

      <!-- iframe of Bezier example -->
      <iframe src="http://p5js.org/assets/learn/curves/bezier.js" width="600px" height="400px">
      </iframe>

      <p>
      While it is difficult to visualize how the control points affect a curve(), it is slightly easier to see how the control points affect Bézier curves.
      Imagine two poles and several rubber bands. The poles connect the control points to the endpoints of the curve. A rubber band connects the tops of the poles.
      Two more rubber bands connect the midpoints of the poles to the midpoint of the first rubber band. One more rubber band connects their midpoints.
      The center of that last rubber band is tied to the curve. This diagram helps to explain, the points can be moved to change the curve.
      </P>

      <!-- image of bezier with lines -->
      <img src="{{assets}}/learn/curves/bezier_with_lines.png">

      <h6> Continuous Bézier Curves<h6>

      <p>
      Just as curveVertex() allows you to make continuous spline curves, bezierVertex() lets you make continuous Bézier curves.
      Again, you must be within a beginShape() / endShape() sequence. You must use vertex(startX, startY) to specify the starting anchor point of the curve.
      Subsequent points are specified with a call to:
      </P>

      <p>bezierVertex(cpx1, cpy1, cpx2, cpy2, x, y);</P>

      <p>
        <ul>
          <li>cpx1, cpy1	Coordinates of the first control point</li>
          <li>cpx2, cpy2	Coordinates of the second control point</li>
          <li>x, y	The next point on the curve</li>
        </ul>
      </p>

      <p>
      Here is a continuous Bézier curve, but it doesn’t join smoothly. In order to make two curves A and B smoothly continuous, the last control point of A,
      the last point of A, and the first control point of B have to be on a straight line.
      </P>

      <script type="text/p5"  data-autoplay>
      function draw() {
        background(255);
        noFill();
        stroke(0);
        beginShape();
        vertex(30, 70); // first point
        bezierVertex(25, 25, 100, 50, 50, 100);
        bezierVertex(50, 140, 75, 140, 120, 120); // if first 2 numbers are changed to 20, 130 it becomes continuous
        endShape();

        ellipse(25, 25, 5, 5);
        ellipse(100, 50, 5, 5);
        ellipse(50, 140, 5, 5);//change to (20, 130, 5, 5) to reflect control point
        ellipse(75, 140, 5, 5);
      }
      </script>

      <h7>Summary<h7>
        <p>
          <ul>
            <li>Use arc() when you need a segment of a circle or an ellipse. You can’t make continuous arcs or use them as part of a shape.</li>
            <li>Use curve() when you need a small curve between two points. Use curveVertex() to make a continuous series of curves as part of a shape.</li>
            <li>Use bezier() when you need long, smooth curves. Use bezierVertex() to make a continuous series of Bézier curves as part of a shape.</li>
          </ul>
        </p>

    </section>

    {{> footer}}

  </div> <!-- end column-span -->

  {{> asterisk}}

</div><!-- end id="get-started-page"  -->
